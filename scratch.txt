Create switch statements for production rules collapsedImport and expandingImport as seen below:

importList:
    IMPORT importIdentifier                 {$$ = alctoken(collapsedImport, "collapsedImport", 2, $1, $2);}
    | IMPORT importIdentifier importList    {$$ = alctoken(expandingImport, "expandingImport", 3, $1, $2, $3);}
    ;

importIdentifier:
    IDENTIFIER DOT importIdentifier     {$$ = alctoken(expandingImportID, "expandingImportID", 3, $1, $2, $3);}
    | IDENTIFIER                        {$$ = $1;}
    | MULT                              {$$ = $1;}
    ;

    We can collapse both switch cases together such that:

    case collapsedImport:
    case expandingImport:
    {
            Some Code

    }

    I want to create a helper function in a file called importHandler.c that takes each IDENTIFIER and rootScope, and checks it for being a support package/library/function call. We will call this function and pass each tree node and scope to it.

    Our goal is to add each segment of an import as an individual entry into our already built symbol tables. We need to check the IDENTIFIER name against what we support, and then allocate a "FUNCTION_TYPE" to it, and then add it to our symbol table in the rootScope (this would be the global table for all of them).

    Lets do the switch cases first.

String.get()
String.equals()
String.length()
String.toString()
String.valueOf()
String.substring()
java.util.Random.nextInt()
java.lang.Math.abs()
java.lang.Math.max()
java.lang.Math.min()
java.lang.Math.pow()
java.lang.Math.cos()
java.lang.Math.sin()
java.lang.Math.tan()