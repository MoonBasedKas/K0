===== Source: global_add.c =====

int y = 2;
int z = 3;
int x;

void add_globals() {
    x = y + z;
}

===== Assembly (gcc -S) =====

	.file	"global_add.c"
	.text
	.globl	y
	.data
	.align 4
	.type	y, @object
	.size	y, 4
y:
	.long	2
	.globl	z
	.align 4
	.type	z, @object
	.size	z, 4
z:
	.long	3
	.globl	x
	.bss
	.align 4
	.type	x, @object
	.size	x, 4
x:
	.zero	4
	.text
	.globl	add_globals
	.type	add_globals, @function
add_globals:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	y(%rip), %edx
	movl	z(%rip), %eax
	addl	%edx, %eax
	movl	%eax, x(%rip)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	add_globals, .-add_globals
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

===== Discussion =====

Globals as declared explictly in assembly unlike locals which are fetched via rbp.
