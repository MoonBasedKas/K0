===== Source: assignments.c =====

#include <stdio.h>

int main(void) {
    int a = 5;
    int b;
    b = a;
    a += 3;
    b -= 2;
    int c = a % 3;

    a++;
    b--;

    printf("a=%d, b=%d, c=%d\n", a, b, c);
    return 0;
}

===== Assembly (gcc -S) =====

	.file	"assignments.c"
	.text
	.section	.rodata
.LC0:
	.string	"a=%d, b=%d, c=%d\n"
	.text
	.globl	main
	.type	main, @function
main:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	$5, -12(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	addl	$3, -12(%rbp)
	subl	$2, -8(%rbp)
	movl	-12(%rbp), %eax
	movslq	%eax, %rdx
	imulq	$1431655766, %rdx, %rdx
	shrq	$32, %rdx
	movl	%eax, %esi
	sarl	$31, %esi
	movl	%edx, %ecx
	subl	%esi, %ecx
	movl	%ecx, %edx
	addl	%edx, %edx
	addl	%ecx, %edx
	subl	%edx, %eax
	movl	%eax, -4(%rbp)
	addl	$1, -12(%rbp)
	subl	$1, -8(%rbp)
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC0(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
	movl	$0, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

===== Discussion =====


Interestingly these assignments are done directly on the stack itself. 

A pecular instruction is imulq	$1431655766, %rdx, %rdx. Which then the 
is followed by a shift right. Another unique instruction to keep in mind is 
sarl which is shrl but keeps the sign. I'm guessing that these instructions 
are used for the modulo operator.

Increments are done via the add instruction rather than the dec/inc instruction.