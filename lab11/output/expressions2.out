===== Source: expressions2.c =====

#include <stdio.h>
#include <stdbool.h>

int main() {
    int a    = 10;
    int b    = 3;
    int quot = a / b;
    int mod  = a % b;
    bool gt  = a > b;
    bool eq  = a == b;
    printf("quot=%d mod=%d gt=%d eq=%d\n", quot, mod, gt, eq);
    return 0;
}
===== Assembly (gcc -S) =====

	.file	"expressions2.c"
	.text
	.section	.rodata
.LC0:
	.string	"quot=%d mod=%d gt=%d eq=%d\n"
	.text
	.globl	main
	.type	main, @function
main:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movl	$10, -16(%rbp)
	movl	$3, -12(%rbp)
	movl	-16(%rbp), %eax
	cltd
	idivl	-12(%rbp)
	movl	%eax, -8(%rbp)
	movl	-16(%rbp), %eax
	cltd
	idivl	-12(%rbp)
	movl	%edx, -4(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setg	%al
	movb	%al, -18(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	sete	%al
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %esi
	movzbl	-18(%rbp), %ecx
	movl	-4(%rbp), %edx
	movl	-8(%rbp), %eax
	movl	%esi, %r8d
	movl	%eax, %esi
	leaq	.LC0(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
	movl	$0, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:


===== Observations =====

cltd is called which upon further research converts a signed long into a 
signed double long.

sete and setg appear to be used for the comparison oppertor we have near the end of main.

The result of modulo appears to be stored in the edx/rdx register.

