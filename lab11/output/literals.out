===== Source: literals.c =====

#include <stdio.h>

int main() {
    int    i = 42;
    double d = 3.14;
    char   c = 'X';

    printf("%d %f %c\n", i, d, c);
    return 0;
}

===== Assembly (gcc -S) =====

	.file	"literals.c"
	.text
	.section	.rodata
.LC1:
	.string	"%d %f %c\n"
	.text
	.globl	main
	.type	main, @function
main:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	$42, -12(%rbp)
	movsd	.LC0(%rip), %xmm0
	movsd	%xmm0, -8(%rbp)
	movb	$88, -13(%rbp)
	movsbl	-13(%rbp), %edx
	movq	-8(%rbp), %rcx
	movl	-12(%rbp), %eax
	movq	%rcx, %xmm0
	movl	%eax, %esi
	leaq	.LC1(%rip), %rax
	movq	%rax, %rdi
	movl	$1, %eax
	call	printf@PLT
	movl	$0, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	main, .-main
	.section	.rodata
	.align 8
.LC0:
	.long	1374389535
	.long	1074339512
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

===== Discussion =====

Once again we can see the xmm registers used, If im correct these are specifically used for floats.
Interestingly 3.14 is not moved or used for anything. Then we can see that the X is moved into a 
register as 88.

This is correct. xmm are the precision registers. Coincidently I used them in CSE221 and then had to explain to John and Rakibul why. -E