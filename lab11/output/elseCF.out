===== Source: elseCF.c =====

#include <stdio.h>

int adjust(int x) {
    if (x > 10)
        x = x - 10;
    else
        x = x + 10;
    return x;
}

int classify(int x) {
    if (x < 0)
        x = -1;
    else if (x == 0)
        x = 0;
    else
        x = 1;
    return x;
}

int main(void) {
    int a = adjust(5);
    int b = adjust(20);

    int ca = classify(a);
    int cb = classify(b);

    printf("a = %d, classify(a) = %d\n", a, ca);
    printf("b = %d, classify(b) = %d\n", b, cb);

    return 0;
}
===== Assembly (gcc -S) =====

	.file	"elseCF.c"
	.text
	.globl	adjust
	.type	adjust, @function
adjust:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)
	cmpl	$10, -4(%rbp)
	jle	.L2
	subl	$10, -4(%rbp)
	jmp	.L3
.L2:
	addl	$10, -4(%rbp)
.L3:
	movl	-4(%rbp), %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	adjust, .-adjust
	.globl	classify
	.type	classify, @function
classify:
.LFB1:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jns	.L6
	movl	$-1, -4(%rbp)
	jmp	.L7
.L6:
	cmpl	$0, -4(%rbp)
	jne	.L8
	movl	$0, -4(%rbp)
	jmp	.L7
.L8:
	movl	$1, -4(%rbp)
.L7:
	movl	-4(%rbp), %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1:
	.size	classify, .-classify
	.section	.rodata
.LC0:
	.string	"a = %d, classify(a) = %d\n"
.LC1:
	.string	"b = %d, classify(b) = %d\n"
	.text
	.globl	main
	.type	main, @function
main:
.LFB2:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	$5, %edi
	call	adjust
	movl	%eax, -16(%rbp)
	movl	$20, %edi
	call	adjust
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, %edi
	call	classify
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, %edi
	call	classify
	movl	%eax, -4(%rbp)
	movl	-8(%rbp), %edx
	movl	-16(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC0(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
	movl	-4(%rbp), %edx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC1(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
	movl	$0, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

===== Observations =====