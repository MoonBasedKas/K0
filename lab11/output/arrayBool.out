===== Source: arrayBool.c =====

#include <stdio.h>
#include <stdbool.h>

int main() {
    bool arr[2] = {true, false};
    arr[1] = !arr[0];
    printf("%d %d\n", arr[0], arr[1]);
    return 0;
}

===== Assembly (gcc -S) =====

	.file	"arrayBool.c"
	.text
	.section	.rodata
.LC0:
	.string	"%d %d\n"
	.text
	.globl	main
	.type	main, @function
main:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movb	$1, -10(%rbp)
	movb	$0, -9(%rbp)
	movzbl	-10(%rbp), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movb	%al, -9(%rbp)
	movzbl	-9(%rbp), %eax
	movzbl	%al, %edx
	movzbl	-10(%rbp), %eax
	movzbl	%al, %eax
	movl	%eax, %esi
	leaq	.LC0(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
	movl	$0, %eax
	movq	-8(%rbp), %rdx
	subq	%fs:40, %rdx
	je	.L3
	call	__stack_chk_fail@PLT
.L3:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:

===== Discussion =====

The ! operator seems to be done with xoring the value with 1. Arrays of booleans
are done with a singular byte and are offset by that one byte kinda like a string.
(movb)

setne could also be called for the ! operator as that follows the current trend of set[char]
being used for comparisons.

    movq    %fs:40, %rax
    movq    %rax, -8(%rbp)

This is important, and the "canary" that Dr. J talked about in class. We're "protecting" the stack here.